generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  username           String               @unique
  password           String
  created_at         DateTime             @default(now())
  updated_at         DateTime?            @updatedAt
  image_url          String?
  event              Event[]
  message            Event_chat_on_user[]
  event_on_user      Event_on_user[]
  image              Image?               @relation(fields: [image_url], references: [url])
  asked_to_be_friend User_on_friend[]     @relation("asked")
  ask_friend         User_on_friend[]     @relation("asker")
  rater              User_on_sport[]      @relation("rater")
  rating             User_on_sport[]      @relation("ratee")
}

model Sport {
  id         Int              @id @default(autoincrement())
  name       String           @unique
  created_at DateTime         @default(now())
  updated_at DateTime?        @updatedAt
  event      Event[]
  image      Sport_on_image[]
  level      User_on_sport[]
}

model Image {
  id         Int              @id @default(autoincrement())
  title      String           @unique
  url        String           @unique
  created_at DateTime         @default(now())
  updated_at DateTime?        @updatedAt
  sport      Sport_on_image[]
  user       User[]
}

model Event {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  location           String
  duration           Int
  nb_team            Int                  @default(2)
  nb_max_participant Int
  status             String               @default("open")
  winner_team        Int?
  creator_id         Int
  score_team_1       Int?
  score_team_2       Int?
  sport_id           Int
  created_at         DateTime             @default(now())
  updated_at         DateTime?            @updatedAt
  creator            User                 @relation(fields: [creator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sport              Sport                @relation(fields: [sport_id], references: [id], onDelete: Cascade)
  Event_chat_on_user Event_chat_on_user[]
  event_on_user      Event_on_user[]
  User_on_sport      User_on_sport[]
}

model Event_on_user {
  event_id   Int
  user_id    Int
  status     String    @default("pending")
  team       Int?
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  event      Event     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([event_id, user_id])
}

model User_on_friend {
  asked_id   Int
  asker_id   Int
  status     String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  asked      User      @relation("asked", fields: [asked_id], references: [id], onDelete: Cascade)
  asker      User      @relation("asker", fields: [asker_id], references: [id], onDelete: Cascade)

  @@id([asked_id, asker_id])
}

model User_on_sport {
  id         Int       @id @default(autoincrement())
  user_id    Int
  rater_id   Int
  sport_id   Int
  rating     Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  event_id   Int?
  event      Event?    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  rater      User      @relation("rater", fields: [rater_id], references: [id], onDelete: Cascade)
  sport      Sport     @relation(fields: [sport_id], references: [id], onDelete: Cascade)
  user       User      @relation("ratee", fields: [user_id], references: [id], onDelete: Cascade)
}

model Sport_on_image {
  sport_id   Int
  image_id   Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  image      Image     @relation(fields: [image_id], references: [id], onDelete: Cascade)
  sport      Sport     @relation(fields: [sport_id], references: [id], onDelete: Cascade)

  @@id([sport_id, image_id])
}

model Event_chat_on_user {
  id         Int       @id @default(autoincrement())
  event_id   Int
  user_id    Int
  message    String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  event      Event     @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
